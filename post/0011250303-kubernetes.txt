3:I[4707,[],""]
5:I[6423,[],""]
6:I[4829,["679","static/chunks/679-09931d2c20ac23c4.js","185","static/chunks/app/layout-04b5cc4ae96ec103.js"],"default"]
4:["slug","0011250303-kubernetes","d"]
0:["a1bFVU1NYHOPcC7wFbgit",[[["",{"children":["post",{"children":[["slug","0011250303-kubernetes","d"],{"children":["__PAGE__?{\"slug\":\"0011250303-kubernetes\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["post",{"children":[["slug","0011250303-kubernetes","d"],{"children":["__PAGE__",{},[["$L1","$L2",[["$","link","0",{"rel":"stylesheet","href":"/tech-blog/_next/static/css/86708423b213bf15.css","precedence":"next","crossOrigin":"$undefined"}]]],null],null]},[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","post","children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","post","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/tech-blog/_next/static/css/2902b82ade31b364.css","precedence":"next","crossOrigin":"$undefined"}]],["$","html",null,{"lang":"ko","className":"__className_c5102c","children":[["$","head",null,{"children":[["$","meta",null,{"name":"viewport","content":"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no"}],["$","meta",null,{"name":"theme-color","content":"#ffffff","media":"(prefers-color-scheme: light)"}],["$","meta",null,{"name":"theme-color","content":"#000000","media":"(prefers-color-scheme: dark)"}],["$","meta",null,{"name":"naver-site-verification","content":"1df124e1d8331da4467178ffddd6188e1d413576"}],["$","meta",null,{"name":"google-adsense-account","content":"ca-pub-6151583773425822"}],["$","link",null,{"rel":"dns-prefetch","href":"https://fonts.googleapis.com"}],["$","link",null,{"rel":"dns-prefetch","href":"https://fonts.gstatic.com"}],["$","link",null,{"rel":"preconnect","href":"https://fonts.googleapis.com","crossOrigin":"anonymous"}],["$","link",null,{"rel":"preconnect","href":"https://fonts.gstatic.com","crossOrigin":"anonymous"}],["$","script",null,{"async":true,"src":"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-6151583773425822","crossOrigin":"anonymous"}]]}],["$","$L6",null,{"children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[]}]}]]}]],null],null],["$L7",null]]]]
8:I[2089,["605","static/chunks/app/post/%5Bslug%5D/page-5fc1a46522590ee2.js"],"default"]
9:I[3299,["605","static/chunks/app/post/%5Bslug%5D/page-5fc1a46522590ee2.js"],"default"]
b:I[1040,["605","static/chunks/app/post/%5Bslug%5D/page-5fc1a46522590ee2.js"],"default"]
d:I[2786,["605","static/chunks/app/post/%5Bslug%5D/page-5fc1a46522590ee2.js"],"default"]
e:I[6798,["605","static/chunks/app/post/%5Bslug%5D/page-5fc1a46522590ee2.js"],"default"]
a:T12b1,<p>Deployment 는 하나의 운영 중인 서비스를 업데이트 하여 다시 배포해야 할 때 도움을 주는 Controller 이다.</p>
<p>Deployment 에 대해 알아보기에 앞서 k8s 에서 사용하는 몇 가지 업그레이드 방법에 대해 알아 본다.</p>
<p><img src="/tech-blog/resources/images/kubernetes/0011-01.png" alt="0011-01"></p>
<p>업그레이드 방법에는 크게 ReCreate, Rolling Update, Bule/Green, Canary 등이 있다.</p>
<h1>ReCreate</h1>
<p>Deployment 를 만들면 v1 의 Pod 들이 만들어 진다. 그리고 각 Pod 마다 각자의 자원을 사용 한다고 할 때 ReCreate 방법으로 를 업그레이드를 하게 되면 Deployment 는 먼저 기존의
Pod 들을 삭제 한다. 그렇기 때문에 서비스에 대한 Downtime 이 발생 하고 자원도 사용하지 않게 된다. 그리고 나서 v2 의 Pod 들을 만들어 준다.</p>
<p><img src="/tech-blog/resources/images/kubernetes/0011-02.png" alt="0011-02"></p>
<p>이 방법의 단점은 Downtime 이 발생하기 때문에 일시적으로 서비스를 중단할 수 있는 경우에만 사용할 수 있다.</p>
<h1>Rolling Update</h1>
<p>Rolling Update 를 하면 Deployment 는 v2 의 Pod 를 먼저 만들어 준다. v1 의 Pod 를 중지하지 않고 v2 의 Pod 를 만들기 때문에 그만큼 자원을 추가 사용하게 된다. 그리고 v1
과 v2 모두 동작하기 때문에 일시적으로 서로 다른 버전의 서비스를 동시에 사용하게 된다.</p>
<p><img src="/tech-blog/resources/images/kubernetes/0011-03.png" alt="0011-03"></p>
<p>v2 의 Pod 를 만들고 v1 의 Pod 하나를 삭제하고, 다시 v2 의 Pod 를 만들고 v1 의 Pod 를 삭제 하는 순서로 처리 된다. 다시 말해서 추가 자원을 사용 한다는 단점이 있지만 서비스
Downtime 이 없다는 장점이 있는 방법 이다.</p>
<h1>Blue/Green</h1>
<p>이 방법은 Deployment 자체로 제공되는 기능은 아니고 Deployment 를 사용 할 수도 있지만 ReplicaSet 과 같이 Replicas 를 관리하는 모든 Controller 를 이용해서 처리할 수
있다.</p>
<p><img src="/tech-blog/resources/images/kubernetes/0011-04.png" alt="0011-04"></p>
<p>Controller 를 만들어서 Pod 가 만들어 지면 Pod 에는 Label 이 있기 때문에 Service 의 Selector 와 연결 된다. 이렇게 운영 중인 상태에서 Controller 를 하나 더 만드는데
v2 에 대한 Pod 를 만들고 Label 도 v2 를 사용 한다.</p>
<p>이 때 자원 사용량은 기존의 2배가 된 상태에서 Service 에 있는 Label 만 수정하면, 기존 Pod 와 연결을 끊고 v2 의 Pod 와 바로 연결 된다. 이 연결은 순간적으로 바뀌기 때문에 서비스에 대한
Downtime 은 없다. 그런데 만약 v2 에 문제가 발생할 경우 Service 의 Label 을 v1 으로 바꿔 줌으로 기존 서비스로 전환하여 롤백이 쉽게 가능하다. 문제가 없을 경우에는 v1 에 대한 내용을
삭제하면 된다.</p>
<p>여러 방법 중 많이 사용하는 방법이고 안정적인 방법 이지만, 2배의 자원이 필요하다는 점이 단점 이다.</p>
<h1>Canary</h1>
<p>v1 에 대한 Pod 가 있고 Label 이 작성 된 상태에서 Service 를 만드는데, ver:v1 이 아닌 ty:app 을 만들어 연결 한다. 이렇게 운영 중인 상태에서 테스트 목적으로 Controller 를
만들 때 Replicas 를 1로 하여 v2 에 대한 Pod 를 하나 만들고, 동일하게 ty:app 이라고 Label 을 작성하면 Service 에 자동으로 연결 된다.</p>
<p><img src="/tech-blog/resources/images/kubernetes/0011-05.png" alt="0011-05"></p>
<p>Service 로 유입되는 트래픽 중에 일부는 v2 에 접근이 되고 자연스럽게 새로운 버전에 대한 테스트가 된다. 이후 문제가 발생할 경우 새로 만든 Controller 의 Replicas 만 0으로 만들면 된다.
이 방법은 불특정한 사용자에 대해 테스트 하는 방법 이다.</p>
<p>또 다른 방법으로 v1 과 v2 에 대한 Service 를 각각 만들고, Ingress Controller 라는 유입되는 트래픽을 url path 에 따라 Service 에 연결해주는 역할을 하는 Controller
를 사용하는 것이다.</p>
<p><img src="/tech-blog/resources/images/kubernetes/0011-06.png" alt="0011-06"></p>
<p>이후 문제 없이 테스트가 완료 되면 v2 에 대한 Pod 를 증가하고 Ingress Controller 에 설정을 변경한 다음 v1 에 대한 내용을 삭제하면 된다.</p>
<p><img src="/tech-blog/resources/images/kubernetes/0011-07.png" alt="0011-07"></p>
<p>이렇게 하면 역시 DownTime 이 발생하지 않는데 자원 사용량은 테스트 할 Pod 의 수나 v2 Pod 를 얼마나 만들어 두고 v1 의 Pod 를 다운 시키냐에 따라 증가하게 된다.</p>
<hr>
<h1>Deployment</h1>c:T1766,<h2>ReCreate</h2>
<p>Deployment 를 만들 때 Replica 에서 넣었던 selector 와 replicas 그리고 template 값을 똑같이 설정 한다. 하지만 이 값들은 Deployment 가 Pod 를 만들어서 관리하기
위한 값은 아니고 ReplicaSet 을 만들 때 사용하는 설정 값을 지정하기 위함 이다.</p>
<p><img src="/tech-blog/resources/images/kubernetes/0011-08.png" alt="0011-08"></p>
<p>이렇게 만들어진 ReplicaSet 은 설정 내용을 바탕으로 Pod 들을 만들게 된다. 그리고 Service 를 만들어 Label 값을 기반으로 Pod 를 연결 하면 이 Service 를 통해 Pod 에 접근할 수
있게 된다.</p>
<p><img src="/tech-blog/resources/images/kubernetes/0011-09.png" alt="0011-09"></p>
<p>이후 ReCreate 방법으로 v2 로 업그레이드 하려면 Deployment 의 template 을 v2 버전으로 업데이트 해주면 되는데, 먼저 ReplicaSet 의 replicas 를 0으로 변경 한다. 그러면
ReplicaSet 은 Pod 들을 제거하고 Service 도 연결 대상이 없어지기 때문에 DownTime 이 발생 한다.</p>
<p><img src="/tech-blog/resources/images/kubernetes/0011-10.png" alt="0011-10"></p>
<p>그리고 새로운 ReplicaSet 을 만드는데 이 template 에는 변경 된 v2 의 Pod 를 넣기 때문에 Pod 들도 v2 버전으로 만들어지고 Service 는 Label 정보에 따라 Pod 와 연결 된다.</p>
<pre><code class="hljs language-yml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span>
<span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span>                 <span class="hljs-comment"># Deployment 를 만들 때</span>
<span class="hljs-attr">metadata:</span>
  <span class="hljs-attr">name:</span> <span class="hljs-string">deployment-1</span>
<span class="hljs-attr">spec:</span> <span class="hljs-comment"># selector, replicas, template 이 포함 되고</span>
  <span class="hljs-attr">selector:</span>
    <span class="hljs-attr">matchLabels:</span>
      <span class="hljs-attr">type:</span> <span class="hljs-string">app</span>
  <span class="hljs-attr">replicas:</span> <span class="hljs-number">2</span>
  <span class="hljs-attr">strategy:</span>
    <span class="hljs-attr">type:</span> <span class="hljs-string">Recreate</span>               <span class="hljs-comment"># 배포 방식으로 Recreate 를 사용 하고</span>
  <span class="hljs-attr">revisionHistoryLimit:</span> <span class="hljs-number">1</span>        <span class="hljs-comment"># 새로운 ReplicaSet 을 만들 때 replicas 가 0이 된</span>
  <span class="hljs-attr">template:</span> <span class="hljs-comment"># ReplicaSet 을 1개만 남기겠다.</span>
    <span class="hljs-attr">metadata:</span> <span class="hljs-comment"># default 값이 10 인 optional 값</span>
      <span class="hljs-attr">labels:</span>
        <span class="hljs-attr">type:</span> <span class="hljs-string">app</span>
    <span class="hljs-attr">spec:</span>
      <span class="hljs-attr">containers:</span>
        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">container</span>
          <span class="hljs-attr">image:</span> <span class="hljs-string">kubetm/app:v1</span>
      <span class="hljs-attr">terminationGracePeriodSeconds:</span> <span class="hljs-number">10</span>
</code></pre><h2>Rolling Update (default)</h2>
<p>서비스가 운영중인 상태에서 새로운 버전으로 template 을 교체하면서 Rolling Update 가 시작 된다. 먼저 Replicas 가 1인 ReplicaSet 을 만들고 Label 값을 기반으로 Service
와 연결 된다.</p>
<p><img src="/tech-blog/resources/images/kubernetes/0011-11.png" alt="0011-11"></p>
<p>이후부터는 v1 과 v2 에 트래픽이 분산 된다. 그리고 기존의 ReplicaSet 의 replicas 를 1로 수정 해서 Pod 를 하나 삭제하고 v2 의 ReplicaSet 의 replicas 를 2로 바꿔 v2
의 Pod 를 하나 만든다. 마지막으로 기존 ReplicaSet 의 replicas 를 0으로 만들어 남아있는 Pod 를 모두 삭제 한다.</p>
<p><img src="/tech-blog/resources/images/kubernetes/0011-12.png" alt="0011-12"></p>
<p>이 방법도 마찬가지로 ReplicaSet 을 제거하지 않고 배포를 종료 한다.</p>
<pre><code class="hljs language-yml"><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span>
<span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span>
<span class="hljs-attr">metadata:</span>
  <span class="hljs-attr">name:</span> <span class="hljs-string">deployment-2</span>
<span class="hljs-attr">spec:</span>
  <span class="hljs-attr">selector:</span>
    <span class="hljs-attr">matchLabels:</span>
      <span class="hljs-attr">type:</span> <span class="hljs-string">app2</span>
  <span class="hljs-attr">replicas:</span> <span class="hljs-number">2</span>
  <span class="hljs-attr">strategy:</span>
    <span class="hljs-attr">type:</span> <span class="hljs-string">RollingUpdate</span>      <span class="hljs-comment"># 배포 방식으로 RollingUpdate 를 사용 하고</span>
  <span class="hljs-attr">minReadySeconds:</span> <span class="hljs-number">10</span>        <span class="hljs-comment"># 값을 설정하지 않으면 순식간에 진행되어</span>
  <span class="hljs-attr">template:</span> <span class="hljs-comment"># 변하는 상황을 보고 싶을 경우 값을 설정</span>
    <span class="hljs-attr">metadata:</span>
      <span class="hljs-attr">labels:</span>
        <span class="hljs-attr">type:</span> <span class="hljs-string">app2</span>
    <span class="hljs-attr">spec:</span>
      <span class="hljs-attr">containers:</span>
        <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">container</span>
          <span class="hljs-attr">image:</span> <span class="hljs-string">kubetm/app:v1</span>
      <span class="hljs-attr">terminationGracePeriodSeconds:</span> <span class="hljs-number">0</span>
</code></pre>2:[["$","div",null,{"className":"$undefined","children":[["$","header",null,{"className":"PostHeader_postHeader__OohTH","children":[["$","h1",null,{"className":"PostHeader_title__NoKGt","children":"Deployment (Recreate, RollingUpdate)"}],["$","p",null,{"className":"PostHeader_description__moC_r","children":""}],["$","div",null,{"className":"PostHeader_meta__9Swgx","children":[["$","span",null,{"className":"$undefined","children":"nimkoes"}],["$","span",null,{"className":"$undefined","children":"2021-03-02"}]]}],["$","div",null,{"className":"PostHeader_tags__lGQ1Q","children":[["$","span","Kubernetes",{"className":"PostHeader_tag__Jf7BC","children":"Kubernetes"}],["$","span","k8s",{"className":"PostHeader_tag__Jf7BC","children":"k8s"}],["$","span","infra",{"className":"PostHeader_tag__Jf7BC","children":"infra"}]]}]]}],["$","$L8",null,{}],["$","article",null,{"className":"page_markdown__SVl4d","children":[["$","$L9",null,{"className":"page_topAd__ctbB7"}],["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$a"}}],["$","$Lb",null,{"className":"page_middleAd__4qBOv","client":"ca-pub-6151583773425822","slot":"your-ad-slot-id"}],["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$c"}}],["$","$Lb",null,{"className":"page_bottomAd__f0OO_","client":"ca-pub-6151583773425822","slot":"your-ad-slot-id"}]]}]]}],["$","div",null,{"className":"page_floatingButtons__qJiZU","children":["$","$Ld",null,{}]}],["$","$Le",null,{}]]
7:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Deployment (Recreate, RollingUpdate) | Nimkoes Tech Blog"}],["$","meta","3",{"name":"description","content":"기본 설명"}],["$","meta","4",{"name":"application-name","content":"Nimkoes Tech Blog"}],["$","link","5",{"rel":"author","href":"https://nimkoes.github.io/tech-blog"}],["$","meta","6",{"name":"author","content":"Nimkoes"}],["$","link","7",{"rel":"manifest","href":"/tech-blog/site.webmanifest","crossOrigin":"use-credentials"}],["$","meta","8",{"name":"keywords","content":"tech-blog,backend,software architect,infrastructure,development"}],["$","meta","9",{"name":"creator","content":"Nimkoes"}],["$","meta","10",{"name":"publisher","content":"Nimkoes"}],["$","meta","11",{"name":"robots","content":"index, follow, nocache"}],["$","meta","12",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","meta","13",{"name":"category","content":"technology"}],["$","link","14",{"rel":"canonical","href":"https://nimkoes.github.io/tech-blog"}],["$","link","15",{"rel":"alternate","hrefLang":"ko-KR","href":"https://nimkoes.github.io/tech-blog"}],["$","meta","16",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","17",{"name":"google-adsense-account","content":"ca-pub-6151583773425822"}],["$","meta","18",{"property":"og:title","content":"Nimkoes Tech Blog - 개발자의 기술 이야기"}],["$","meta","19",{"property":"og:description","content":"I work diligently to become lazy ☕"}],["$","meta","20",{"property":"og:url","content":"https://nimkoes.github.io/tech-blog"}],["$","meta","21",{"property":"og:site_name","content":"Nimkoes Tech Blog"}],["$","meta","22",{"property":"og:locale","content":"ko_KR"}],["$","meta","23",{"property":"og:image","content":"https://nimkoes.github.io/tech-blog/og-image.png"}],["$","meta","24",{"property":"og:image:width","content":"1200"}],["$","meta","25",{"property":"og:image:height","content":"630"}],["$","meta","26",{"property":"og:image:alt","content":"Nimkoes Tech Blog"}],["$","meta","27",{"property":"og:image:type","content":"image/png"}],["$","meta","28",{"property":"og:type","content":"website"}],["$","meta","29",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","30",{"name":"twitter:site","content":"@nimkoes"}],["$","meta","31",{"name":"twitter:creator","content":"@nimkoes"}],["$","meta","32",{"name":"twitter:title","content":"Nimkoes Tech Blog"}],["$","meta","33",{"name":"twitter:description","content":"I work diligently to become lazy ☕"}],["$","meta","34",{"name":"twitter:image","content":"https://nimkoes.github.io/tech-blog/og-image.png"}],["$","link","35",{"rel":"icon","href":"/tech-blog/favicon.ico","sizes":"any"}],["$","link","36",{"rel":"icon","href":"/tech-blog/icon.svg","type":"image/svg+xml"}],["$","link","37",{"rel":"icon","href":"/tech-blog/favicon-32x32.png","sizes":"32x32","type":"image/png"}],["$","link","38",{"rel":"icon","href":"/tech-blog/favicon-16x16.png","sizes":"16x16","type":"image/png"}],["$","link","39",{"rel":"apple-touch-icon","href":"/tech-blog/apple-touch-icon.png","sizes":"180x180","type":"image/png"}],["$","link","40",{"rel":"mask-icon","href":"/tech-blog/safari-pinned-tab.svg","color":"#5bbad5"}],["$","meta","41",{"name":"next-size-adjust"}]]
1:null
