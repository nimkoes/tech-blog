3:I[4707,[],""]
5:I[6423,[],""]
6:I[4829,["679","static/chunks/679-09931d2c20ac23c4.js","185","static/chunks/app/layout-7b9eb4963e5bd58c.js"],"default"]
4:["slug","0001250302-git","d"]
0:["FDQtW3TvDuFrSsDu1Lic4",[[["",{"children":["post",{"children":[["slug","0001250302-git","d"],{"children":["__PAGE__?{\"slug\":\"0001250302-git\"}",{}]}]}]},"$undefined","$undefined",true],["",{"children":["post",{"children":[["slug","0001250302-git","d"],{"children":["__PAGE__",{},[["$L1","$L2",[["$","link","0",{"rel":"stylesheet","href":"/tech-blog/_next/static/css/86708423b213bf15.css","precedence":"next","crossOrigin":"$undefined"}]]],null],null]},[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","post","children","$4","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[null,["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children","post","children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":"$undefined","notFoundStyles":"$undefined"}]],null]},[[[["$","link","0",{"rel":"stylesheet","href":"/tech-blog/_next/static/css/1f59140b53390c8f.css","precedence":"next","crossOrigin":"$undefined"}]],["$","html",null,{"lang":"ko","className":"__className_c5102c","children":[["$","head",null,{"children":[["$","meta",null,{"name":"viewport","content":"width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no, viewport-fit=cover"}],["$","meta",null,{"name":"theme-color","content":"#ffffff","media":"(prefers-color-scheme: light)"}],["$","meta",null,{"name":"theme-color","content":"#000000","media":"(prefers-color-scheme: dark)"}],["$","meta",null,{"name":"naver-site-verification","content":"1df124e1d8331da4467178ffddd6188e1d413576"}],["$","meta",null,{"name":"google-adsense-account","content":"ca-pub-6151583773425822"}],["$","link",null,{"rel":"dns-prefetch","href":"https://fonts.googleapis.com"}],["$","link",null,{"rel":"dns-prefetch","href":"https://fonts.gstatic.com"}],["$","link",null,{"rel":"preconnect","href":"https://fonts.googleapis.com","crossOrigin":"anonymous"}],["$","link",null,{"rel":"preconnect","href":"https://fonts.gstatic.com","crossOrigin":"anonymous"}],["$","script",null,{"async":true,"src":"https://pagead2.googlesyndication.com/pagead/js/adsbygoogle.js?client=ca-pub-6151583773425822","crossOrigin":"anonymous"}]]}],["$","$L6",null,{"children":["$","$L3",null,{"parallelRouterKey":"children","segmentPath":["children"],"error":"$undefined","errorStyles":"$undefined","errorScripts":"$undefined","template":["$","$L5",null,{}],"templateStyles":"$undefined","templateScripts":"$undefined","notFound":[["$","title",null,{"children":"404: This page could not be found."}],["$","div",null,{"style":{"fontFamily":"system-ui,\"Segoe UI\",Roboto,Helvetica,Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\"","height":"100vh","textAlign":"center","display":"flex","flexDirection":"column","alignItems":"center","justifyContent":"center"},"children":["$","div",null,{"children":[["$","style",null,{"dangerouslySetInnerHTML":{"__html":"body{color:#000;background:#fff;margin:0}.next-error-h1{border-right:1px solid rgba(0,0,0,.3)}@media (prefers-color-scheme:dark){body{color:#fff;background:#000}.next-error-h1{border-right:1px solid rgba(255,255,255,.3)}}"}}],["$","h1",null,{"className":"next-error-h1","style":{"display":"inline-block","margin":"0 20px 0 0","padding":"0 23px 0 0","fontSize":24,"fontWeight":500,"verticalAlign":"top","lineHeight":"49px"},"children":"404"}],["$","div",null,{"style":{"display":"inline-block"},"children":["$","h2",null,{"style":{"fontSize":14,"fontWeight":400,"lineHeight":"49px","margin":0},"children":"This page could not be found."}]}]]}]}]],"notFoundStyles":[]}]}]]}]],null],null],["$L7",null]]]]
8:I[2089,["605","static/chunks/app/post/%5Bslug%5D/page-5fc1a46522590ee2.js"],"default"]
9:I[3299,["605","static/chunks/app/post/%5Bslug%5D/page-5fc1a46522590ee2.js"],"default"]
b:I[1040,["605","static/chunks/app/post/%5Bslug%5D/page-5fc1a46522590ee2.js"],"default"]
d:I[2786,["605","static/chunks/app/post/%5Bslug%5D/page-5fc1a46522590ee2.js"],"default"]
e:I[6798,["605","static/chunks/app/post/%5Bslug%5D/page-5fc1a46522590ee2.js"],"default"]
a:T52d9,<h1>Merge</h1>
<ul>
<li>두 개의 브랜치를 하나로 합치는 작업</li>
<li>대표적인 병합 전략
<ul>
<li>Fast-forward Merge</li>
<li>Three-way Merge</li>
<li>Squash Merge</li>
<li>Rebase Merge</li>
</ul>
</li>
</ul><h2>주요 명령어</h2>
<ul>
<li><code>git merge {target branch}</code> : 현재 <code>branch</code> 에 <code>target branch</code> 의 내용을 병합 한다.</li>
<li><code>git merge --squash {target branch}</code> : 현재 <code>branch</code> 에 <code>target branch</code> 의 변경 사항들을 하나의 <code>commit</code> 으로 병합 한다.</li>
<li><code>git rebase {target branch}</code> : 현재 <code>branch</code> 의 변경 사항들을 <code>target branch</code> 의 최신 <code>commit</code> 뒤에 순서대로 재적용하여 이력을 재구성 한다.</li>
</ul><h2>Fast-forward Merge</h2>
<ul>
<li>새로운 <code>commit</code> 을 생성하지 않는 단순한 병합 방식</li>
<li>병합 대상 <code>branch</code> 가 직선적인 관계일 때 사용 된다.</li>
<li>원본 <code>branch</code> 에서 새로운 <code>branch</code> 생성 이후, 원본 <code>branch</code> 가 변경되지 않은 경우<br>
<code>HEAD</code> 가 새로운 <code>branch</code> 의 최신 <code>commit</code> 으로 이동하여 병합</li>
<li><code>commit</code> log 가 깨끗하다.</li>
<li><code>branch</code> 가 삭제 되면 변경 추적이 어렵다.</li>
</ul>
<pre><code class="hljs language-sh">01.merge_fast-forward % git init
Initialized empty Git repository <span class="hljs-keyword">in</span> /git-session/01.merge_fast-forward/.git/
01.merge_fast-forward % <span class="hljs-built_in">echo</span> <span class="hljs-string">"a"</span> > f1.txt
01.merge_fast-forward % git add .
01.merge_fast-forward % git commit -m <span class="hljs-string">"1"</span>
[main (root-commit) 61f0b4a] 1
 1 file changed, 1 insertion(+)
 create mode 100644 f1.txt
01.merge_fast-forward % git checkout -b feature
Switched to a new branch <span class="hljs-string">'feature'</span>
01.merge_fast-forward % <span class="hljs-built_in">echo</span> <span class="hljs-string">"aaa"</span> > f1.txt
01.merge_fast-forward % <span class="hljs-built_in">cat</span> f1.txt
aaa
01.merge_fast-forward % git commit -am <span class="hljs-string">"2"</span>
[feature d884c1a] 2
 1 file changed, 1 insertion(+), 1 deletion(-)
01.merge_fast-forward % git checkout main
Switched to branch <span class="hljs-string">'main'</span>
01.merge_fast-forward % git <span class="hljs-built_in">log</span> --oneline --graph --all
* d884c1a (feature) 2
* 61f0b4a (HEAD -> main) 1
01.merge_fast-forward % git merge feature
Updating 61f0b4a..d884c1a
Fast-forward
 f1.txt | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
01.merge_fast-forward % git <span class="hljs-built_in">log</span> --oneline --graph --all
* d884c1a (HEAD -> main, feature) 2
* 61f0b4a 1
01.merge_fast-forward %
</code></pre><h2>Three-way Merge</h2>
<ul>
<li>두 개의 branch 가 서로 다른 commit 을 가지고 있을 때</li>
<li>공통 조상 <code>commit ancestor</code> 을 기준으로 변경 사항을 병합하는 방식</li>
<li>fast-forward 가 불가능한 경우 사용</li>
<li><code>commit</code> 히스토리를 명확하게 유지할 수 있다.</li>
<li>새로운 <code>commit</code> 이 생긴다.</li>
<li>세 개의 <code>commit</code> 을 상용하기 때문에 Three-way 라고 부른다.
<ul>
<li><code>Base</code> : 공통 조상 <code>commit ancestor</code></li>
<li><code>HEAD </code>: 병합을 수행 할 현재 <code>branch</code></li>
<li><code>MERGE</code> : 가져올 <code>branch</code></li>
</ul>
</li>
</ul>
<pre><code class="hljs language-sh">02.merge_three-way % git init
Initialized empty Git repository <span class="hljs-keyword">in</span> /git-session/02.merge_three-way/.git/
02.merge_three-way % <span class="hljs-built_in">echo</span> <span class="hljs-string">"a"</span> > f1.txt
02.merge_three-way % git add .
02.merge_three-way % git commit -m <span class="hljs-string">"1"</span>
[main (root-commit) a33b327] 1
 1 file changed, 1 insertion(+)
 create mode 100644 f1.txt
02.merge_three-way % git checkout -b feature
Switched to a new branch <span class="hljs-string">'feature'</span>
02.merge_three-way % <span class="hljs-built_in">echo</span> <span class="hljs-string">"b"</span> > f2.txt
02.merge_three-way % git add .
02.merge_three-way % git commit -m <span class="hljs-string">"2"</span>
[feature 0e502a8] 2
 1 file changed, 1 insertion(+)
 create mode 100644 f2.txt
02.merge_three-way % git checkout main
Switched to branch <span class="hljs-string">'main'</span>
02.merge_three-way % <span class="hljs-built_in">echo</span> <span class="hljs-string">"b"</span> > f1.txt
02.merge_three-way % git commit -am <span class="hljs-string">"3"</span>
[main 6537be1] 3
 1 file changed, 1 insertion(+), 1 deletion(-)
02.merge_three-way % git <span class="hljs-built_in">log</span> --oneline --graph --all
* 6537be1 (HEAD -> main) 3
| * 0e502a8 (feature) 2
|/
* a33b327 1
02.merge_three-way % git merge feature
Merge made by the <span class="hljs-string">'ort'</span> strategy.
 f2.txt | 1 +
 1 file changed, 1 insertion(+)
 create mode 100644 f2.txt
02.merge_three-way % git <span class="hljs-built_in">log</span> --oneline --graph --all
*   befb4a9 (HEAD -> main) Merge branch <span class="hljs-string">'feature'</span>
|\
| * 0e502a8 (feature) 2
* | 6537be1 3
|/
* a33b327 1
02.merge_three-way % <span class="hljs-built_in">ls</span> -al
total 16
drwxr-xr-x@ 13 seok  staff  416  2 19 23:26 .git
-rw-r--r--@  1 seok  staff    2  2 19 23:26 f1.txt
-rw-r--r--@  1 seok  staff    2  2 19 23:26 f2.txt
02.merge_three-way % <span class="hljs-built_in">cat</span> f1.txt
b
02.merge_three-way % <span class="hljs-built_in">cat</span> f2.txt
b
02.merge_three-way %
</code></pre>
<h1></h1><h2>Merge made by the ‘ort’ strategy.</h2>
<ul>
<li>git이 ORT <code>Optimized Recursive Trees</code> 전략을 사용하여 병합을 수행했다는 것을 뜻한다.</li>
<li>2021년 8월 기본 병합 전략으로 도입</li>
<li>기존의 <code>recursive</code> (= <code>Three-way Merge</code>) 병합 전략을 개선한 버전으로 성능과 conflict 상황에 대처가 개선 됨</li>
</ul><h2>Squash Merge</h2>
<ul>
<li>여러 개의 <code>commit</code> 을 하나의 <code>commit</code> 으로 합쳐서 병합하는 방식</li>
<li><code>commit</code> 히스토리를 깔끔하게 정리하고 싶을 때 유용하다.</li>
<li><code>commit</code> log 에 병합에 대한 <code>branch</code> 가 남지 않는다.</li>
</ul>
<h1></h1><h2>case 1. Base branch 에 추가 commit 이 없는 경우</h2>
<pre><code class="hljs language-sh">03.merge_squash % git init
/03.merge_squash/.git/ 안의 빈 깃 저장소를 다시 초기화했습니다
03.merge_squash % <span class="hljs-built_in">echo</span> <span class="hljs-string">"a"</span> > f1.txt
03.merge_squash % git add .
03.merge_squash % git commit -m 1
[main (최상위-커밋) be9f700] 1
 1 file changed, 1 insertion(+)
 create mode 100644 f1.txt
03.merge_squash % git checkout -b feature
새로 만든 <span class="hljs-string">'feature'</span> 브랜치로 전환합니다
03.merge_squash % <span class="hljs-built_in">echo</span> <span class="hljs-string">"aa"</span> > f1.txt
03.merge_squash % git commit -am 2
[feature a6eabbd] 2
 1 file changed, 1 insertion(+), 1 deletion(-)
03.merge_squash % <span class="hljs-built_in">echo</span> <span class="hljs-string">"aaa"</span> > f1.txt
03.merge_squash % git commit -am 3
[feature 1396cb3] 3
 1 file changed, 1 insertion(+), 1 deletion(-)
03.merge_squash % git checkout main
<span class="hljs-string">'main'</span> 브랜치로 전환합니다
03.merge_squash % git <span class="hljs-built_in">log</span> --oneline --graph --all
* 1396cb3 (feature) 3
* a6eabbd 2
* be9f700 (HEAD -> main) 1
03.merge_squash % git merge --squash feature
업데이트 중 be9f700..1396cb3
Fast-forward
커밋 합치기 -- HEAD를 업데이트하지 않습니다
 f1.txt | 2 +-
 1 file changed, 1 insertion(+), 1 deletion(-)
03.merge_squash % git <span class="hljs-built_in">log</span> --oneline --graph --all
* 1396cb3 (feature) 3
* a6eabbd 2
* be9f700 (HEAD -> main) 1
03.merge_squash % git status
현재 브랜치 main
커밋할 변경 사항:
  (use <span class="hljs-string">"git restore --staged &#x3C;file>..."</span> to unstage)
	수정함:        f1.txt

03.merge_squash % git commit -m <span class="hljs-string">"4"</span>
[main 6dce99f] 4
 1 file changed, 1 insertion(+), 1 deletion(-)
03.merge_squash % git <span class="hljs-built_in">log</span> --oneline --graph --all
* 6dce99f (HEAD -> main) 4
| * 1396cb3 (feature) 3
| * a6eabbd 2
|/
* be9f700 1
03.merge_squash %
</code></pre>
<h1></h1><h2>case 2. Base branch 에 추가 commit 이 있는 경우</h2>
<pre><code class="hljs language-sh">03.merge_squash % <span class="hljs-built_in">echo</span> <span class="hljs-string">"aaaaaa"</span> > f1.txt
03.merge_squash % git commit -am 1
[main a68d456] 1
 1 file changed, 1 insertion(+), 1 deletion(-)
03.merge_squash % git checkout -b feature2
새로 만든 <span class="hljs-string">'feature2'</span> 브랜치로 전환합니다
03.merge_squash % <span class="hljs-built_in">echo</span> <span class="hljs-string">"aaaaaaa"</span> > f1.txt
03.merge_squash % git commit -am <span class="hljs-string">"2"</span>
[feature2 4fcb124] 2
 1 file changed, 1 insertion(+), 1 deletion(-)
03.merge_squash % <span class="hljs-built_in">echo</span> <span class="hljs-string">"aaaaaaaa"</span> > f1.txt
03.merge_squash % git commit -am <span class="hljs-string">"3"</span>
[feature2 3c3d68e] 3
 1 file changed, 1 insertion(+), 1 deletion(-)
03.merge_squash % <span class="hljs-built_in">echo</span> <span class="hljs-string">"aaaaaaaaa"</span> > f1.txt
03.merge_squash % git commit -am <span class="hljs-string">"4"</span>
[feature2 ac93cc2] 4
 1 file changed, 1 insertion(+), 1 deletion(-)
03.merge_squash % git checkout main
<span class="hljs-string">'main'</span> 브랜치로 전환합니다
03.merge_squash % <span class="hljs-built_in">echo</span> <span class="hljs-string">"b"</span> > f2.txt
03.merge_squash % git add .
03.merge_squash % git commit -m 5
[main 64dcd61] 5
 1 file changed, 1 insertion(+)
 create mode 100644 f2.txt
03.merge_squash % git merge --squash feature2
커밋 합치기 -- HEAD를 업데이트하지 않습니다
자동 병합이 잘 진행되었습니다. 요청한대로 커밋 전에 중지합니다
03.merge_squash % git status
현재 브랜치 main
커밋할 변경 사항:
  (use <span class="hljs-string">"git restore --staged &#x3C;file>..."</span> to unstage)
	수정함:        f1.txt

03.merge_squash % git commit -m 6
[main 44b3a12] 6
 1 file changed, 1 insertion(+), 1 deletion(-)
03.merge_squash % git <span class="hljs-built_in">log</span> --oneline --graph --all
* 44b3a12 (HEAD -> main) 6
* 64dcd61 5
| * ac93cc2 (feature2) 4
| * 3c3d68e 3
| * 4fcb124 2
|/
* a68d456 1
03.merge_squash %
</code></pre><h2>Rebase Merge</h2>
<ul>
<li>병합 할 <code>branch</code> 의 <code>commit</code> 들을 현재 <code>branch</code> 의 최신 <code>commit</code> 뒤에 이어 붙이는 방식</li>
<li><code>merge</code> 와 달리 <code>branch</code> 의 히스토리를 한 줄의 연속 된 작업 처럼 보이게 만든다.</li>
<li>원래 <code>branch</code> 의 모양이 유지되지 않아 히스토리 파악이 어려울 수 있다.</li>
<li><code>commit</code> log 를 깔끔하게 정리 할 수 있다.</li>
<li><code>commit</code> <code>hash</code> 값이 바뀐다.</li>
<li><code>rebase</code> 도중 <code>conflict</code> 가 발생한 경우
<ul>
<li>중단하고 싶다면 <code>git rebase --abort</code> 를 입력하여 원래 상태로 되돌아 간다.</li>
<li>계속 한다면 충돌 해결 후 <code>git add {file}</code> -> <code>git rebase --continue</code> 를 입력하여 진행할 수 있다.
<ul>
<li>병합 대상 <code>commit</code> 에 대해 모든 충돌이 해결 될 때까지 이 과정을 반복 한다.</li>
</ul>
</li>
</ul>
</li>
</ul>
<h1></h1><h2>happy case</h2>
<pre><code class="hljs language-sh">04.merge_rebase % git init
Initialized empty Git repository <span class="hljs-keyword">in</span> /git-session/04.merge_rebase/.git/
04.merge_rebase % <span class="hljs-built_in">echo</span> <span class="hljs-string">"a"</span> > f1.txt
04.merge_rebase % git add .
04.merge_rebase % git commit -m 1
[main (root-commit) 2fb981b] 1
 1 file changed, 1 insertion(+)
 create mode 100644 f1.txt
04.merge_rebase % git checkout -b feature
Switched to a new branch <span class="hljs-string">'feature'</span>
04.merge_rebase % <span class="hljs-built_in">echo</span> <span class="hljs-string">"b"</span> > f2.txt
04.merge_rebase % git add .
04.merge_rebase % git commit -m 2
[feature ef1220a] 2
 1 file changed, 1 insertion(+)
 create mode 100644 f2.txt
04.merge_rebase % vi f1.txt
04.merge_rebase % <span class="hljs-built_in">cat</span> f1.txt
a
b
04.merge_rebase % git commit -am 3
[feature 82316f8] 3
 1 file changed, 1 insertion(+)
04.merge_rebase % git checkout main
Switched to branch <span class="hljs-string">'main'</span>
04.merge_rebase % <span class="hljs-built_in">echo</span> <span class="hljs-string">"c"</span> > f3.txt
04.merge_rebase % git add .
04.merge_rebase % git commit -m 4
[main c44bc02] 4
 1 file changed, 1 insertion(+)
 create mode 100644 f3.txt
04.merge_rebase % git checkout feature
Switched to branch <span class="hljs-string">'feature'</span>
04.merge_rebase % git <span class="hljs-built_in">log</span> --oneline --graph --all
* c44bc02 (main) 4
| * 82316f8 (HEAD -> feature) 3
| * ef1220a 2
|/
* 2fb981b 1
04.merge_rebase % git rebase main
Successfully rebased and updated refs/heads/feature.
04.merge_rebase % git <span class="hljs-built_in">log</span> --oneline --graph --all
* 78a7796 (HEAD -> feature) 3
* 9045d5b 2
* c44bc02 (main) 4
* 2fb981b 1
04.merge_rebase % <span class="hljs-built_in">ls</span> -al
total 24
-rw-r--r--@  1 seok  staff    4  2 20 20:56 f1.txt
-rw-r--r--@  1 seok  staff    2  2 20 20:56 f2.txt
-rw-r--r--@  1 seok  staff    2  2 20 20:56 f3.txt
04.merge_rebase % <span class="hljs-built_in">cat</span> f1.txt
a
b
04.merge_rebase % <span class="hljs-built_in">cat</span> f2.txt
b
04.merge_rebase % <span class="hljs-built_in">cat</span> f3.txt
c
04.merge_rebase %
</code></pre>
<h1></h1><h2>conflict case</h2>
<pre><code class="hljs language-sh">05.merge_rebase_conflict % git init
Initialized empty Git repository <span class="hljs-keyword">in</span> /git-session/05.merge_rebase_conflict/.git/
05.merge_rebase_conflict % <span class="hljs-built_in">echo</span> <span class="hljs-string">"a"</span> > f1.txt
05.merge_rebase_conflict % git add f1.txt
05.merge_rebase_conflict % git commit -m 1
[main (root-commit) 90910f8] 1
 1 file changed, 1 insertion(+)
 create mode 100644 f1.txt
05.merge_rebase_conflict % git checkout -b feature
Switched to a new branch <span class="hljs-string">'feature'</span>
05.merge_rebase_conflict % vi f1.txt
&#x3C;&#x3C;&#x3C;&#x3C;&#x3C;&#x3C;&#x3C; <span class="hljs-string">HEAD
qqqqq
05.merge_rebase_conflict % cat f1.txt
bb
resolve conflict 2
05.merge_rebase_conflict % git commit -am 2
[feature 073b8fa] 2
 1 file changed, 1 insertion(+), 1 deletion(-)
05.merge_rebase_conflict % vi f1.txt
05.merge_rebase_conflict % cat f1.txt
ccc
05.merge_rebase_conflict % git commit -am 3
[feature dc79ca4] 3
 1 file changed, 1 insertion(+), 1 deletion(-)
05.merge_rebase_conflict % git checkout main
Switched to branch 'main'
05.merge_rebase_conflict % vi f1.txt
05.merge_rebase_conflict % git commit -am 4
[main 70fd47e] 4
 1 file changed, 1 insertion(+), 1 deletion(-)
05.merge_rebase_conflict % git checkout feature
Switched to branch 'feature'
05.merge_rebase_conflict % git log --oneline --graph --all
* 70fd47e (main) 4
| * dc79ca4 (HEAD</span> -> feature) 3
| * 073b8fa 2
|/
* 90910f8 1
05.merge_rebase_conflict %
05.merge_rebase_conflict % git rebase main
Auto-merging f1.txt
CONFLICT (content): Merge conflict <span class="hljs-keyword">in</span> f1.txt
error: could not apply 073b8fa... 2
hint: Resolve all conflicts manually, mark them as resolved with
hint: <span class="hljs-string">"git add/rm &#x3C;conflicted_files>"</span>, <span class="hljs-keyword">then</span> run <span class="hljs-string">"git rebase --continue"</span>.
hint: You can instead skip this commit: run <span class="hljs-string">"git rebase --skip"</span>.
hint: To abort and get back to the state before <span class="hljs-string">"git rebase"</span>, run <span class="hljs-string">"git rebase --abort"</span>.
Could not apply 073b8fa... 2
05.merge_rebase_conflict % <span class="hljs-built_in">cat</span> f1.txt
&#x3C;&#x3C;&#x3C;&#x3C;&#x3C;&#x3C;&#x3C; <span class="hljs-string">HEAD
qqqqq
=======
bb
>>>>>>> 073b8fa (2)
05.merge_rebase_conflict % vi f1.txt
05.merge_rebase_conflict % git add f1.txt
05.merge_rebase_conflict % git rebase --continue
[detached HEAD</span> 3e7b852] resolve conflict
 1 file changed, 1 insertion(+)
Auto-merging f1.txt
CONFLICT (content): Merge conflict <span class="hljs-keyword">in</span> f1.txt
error: could not apply dc79ca4... 3
hint: Resolve all conflicts manually, mark them as resolved with
hint: <span class="hljs-string">"git add/rm &#x3C;conflicted_files>"</span>, <span class="hljs-keyword">then</span> run <span class="hljs-string">"git rebase --continue"</span>.
hint: You can instead skip this commit: run <span class="hljs-string">"git rebase --skip"</span>.
hint: To abort and get back to the state before <span class="hljs-string">"git rebase"</span>, run <span class="hljs-string">"git rebase --abort"</span>.
Could not apply dc79ca4... 3
05.merge_rebase_conflict % <span class="hljs-built_in">cat</span> f1.txt
&#x3C;&#x3C;&#x3C;&#x3C;&#x3C;&#x3C;&#x3C; <span class="hljs-string">HEAD
qqqqq
bb
=======
ccc
>>>>>>> dc79ca4 (3)
05.merge_rebase_conflict % vi f1.txt
05.merge_rebase_conflict % git add f1.txt
05.merge_rebase_conflict % git rebase --continue
[detached HEAD</span> 3d46b18] resolve conflict 2
 1 file changed, 1 insertion(+)
Successfully rebased and updated refs/heads/feature.
05.merge_rebase_conflict %
05.merge_rebase_conflict % git status
On branch feature
nothing to commit, working tree clean
05.merge_rebase_conflict % git <span class="hljs-built_in">log</span> --oneline --graph --all
* 3d46b18 (HEAD -> feature) resolve conflict 2
* 3e7b852 resolve conflict
* 70fd47e (main) 4
* 90910f8 1
05.merge_rebase_conflict %
</code></pre>
<h1>reset</h1>
<ul>
<li>해당 <code>commit</code> 시점의 상태로 되돌린다.</li>
<li><code>commit</code> 을 되돌린 것에 대한 이력을 남기지 않는다.</li>
<li>다음의 세 가지 모드가 있다.</li>
</ul>
<table>
<thead>
<tr>
<th>option</th>
<th>Working Directory</th>
<th>Index (<code>stage</code>)</th>
<th>HEAD (<code>commit</code>)</th>
</tr>
</thead>
<tbody>
<tr>
<td><code>--soft</code></td>
<td><code>O</code></td>
<td><code>O</code></td>
<td><code>X</code></td>
</tr>
<tr>
<td><code>--mixed</code></td>
<td><code>O</code></td>
<td><code>X</code></td>
<td><code>X</code></td>
</tr>
<tr>
<td><code>--hard</code></td>
<td><code>X</code></td>
<td><code>X</code></td>
<td><code>X</code></td>
</tr>
</tbody>
</table>
<ul>
<li><code>O</code> : 되돌리지 않고 현재 상태를 유지 한다.</li>
<li><code>X</code> : 이전 상태로 되돌린다.</li>
</ul><h2>주요 명령어</h2>
<ul>
<li><code>git reset --soft {hash}</code></li>
<li><code>git reset --mixed {hash}</code></li>
<li><code>git reset --hard {hash}</code></li>
</ul>
<h1></h1><h2>soft</h2>
<ul>
<li><code>commit</code> 을 되돌린다.</li>
<li><code>stage</code> 와 작업중인 <code>working directory</code> 는 현재 상태를 유지 한다.</li>
</ul>
<pre><code class="hljs language-sh">06.reset_soft % git init
Initialized empty Git repository <span class="hljs-keyword">in</span> /git-session/06.reset_soft/.git/
06.reset_soft % <span class="hljs-built_in">echo</span> <span class="hljs-string">"a"</span> > f1.txt
06.reset_soft % git add .
06.reset_soft % git commit -m 1
[main (root-commit) f18ee98] 1
 1 file changed, 1 insertion(+)
 create mode 100644 f1.txt
06.reset_soft % <span class="hljs-built_in">echo</span> <span class="hljs-string">"b"</span> > f1.txt
06.reset_soft % git commit -am 2
[main 5816e9a] 2
 1 file changed, 1 insertion(+), 1 deletion(-)
06.reset_soft % <span class="hljs-built_in">echo</span> <span class="hljs-string">"c"</span> > f1.txt
06.reset_soft % git commit -am 3
[main c01fc12] 3
 1 file changed, 1 insertion(+), 1 deletion(-)

06.reset_soft % <span class="hljs-built_in">echo</span> <span class="hljs-string">"d"</span> > f1.txt
06.reset_soft % git add .
06.reset_soft % git <span class="hljs-built_in">log</span> --oneline
c01fc12 (HEAD -> main) 3
5816e9a 2
f18ee98 1
06.reset_soft % git reset --soft 5816e9a
06.reset_soft % git <span class="hljs-built_in">log</span> --oneline
5816e9a (HEAD -> main) 2
f18ee98 1
06.reset_soft % git status
On branch main
Changes to be committed:
  (use <span class="hljs-string">"git restore --staged &#x3C;file>..."</span> to unstage)
	modified:   f1.txt

06.reset_soft % <span class="hljs-built_in">cat</span> f1.txt
d
06.reset_soft %
</code></pre>
<h1></h1>c:T9340,<h2>mixed</h2>
<ul>
<li><code>commit</code> 과 <code>stage</code> 를 되돌린다.</li>
<li>작업중인 <code>working directory</code> 는 현재 상태를 유지 한다.</li>
</ul>
<pre><code class="hljs language-sh">07.reset_mixed % git init
Initialized empty Git repository <span class="hljs-keyword">in</span> /git-session/07.reset_mixed/.git/
07.reset_mixed % <span class="hljs-built_in">echo</span> <span class="hljs-string">"a"</span> > f1.txt
07.reset_mixed % git add .
07.reset_mixed % git commit -m 1
[main (root-commit) cf30846] 1
 1 file changed, 1 insertion(+)
 create mode 100644 f1.txt
07.reset_mixed % <span class="hljs-built_in">echo</span> <span class="hljs-string">"b"</span> > f1.txt
07.reset_mixed % git commit -am 2
[main 42df273] 2
 1 file changed, 1 insertion(+), 1 deletion(-)
07.reset_mixed % <span class="hljs-built_in">echo</span> <span class="hljs-string">"c"</span> > f1.txt
07.reset_mixed % git commit -am 3
[main 8e78753] 3
 1 file changed, 1 insertion(+), 1 deletion(-)
07.reset_mixed % git <span class="hljs-built_in">log</span> --oneline
8e78753 (HEAD -> main) 3
42df273 2
cf30846 1
07.reset_mixed % <span class="hljs-built_in">echo</span> <span class="hljs-string">"d"</span> > f1.txt
07.reset_mixed % git add .
07.reset_mixed % git status
On branch main
Changes to be committed:
  (use <span class="hljs-string">"git restore --staged &#x3C;file>..."</span> to unstage)
	modified:   f1.txt

07.reset_mixed % git reset --mixed 42df273
Unstaged changes after reset:
M	f1.txt

07.reset_mixed % git <span class="hljs-built_in">log</span> --oneline
42df273 (HEAD -> main) 2
cf30846 1
07.reset_mixed % git status
On branch main
Changes not staged <span class="hljs-keyword">for</span> commit:
  (use <span class="hljs-string">"git add &#x3C;file>..."</span> to update what will be committed)
  (use <span class="hljs-string">"git restore &#x3C;file>..."</span> to discard changes <span class="hljs-keyword">in</span> working directory)
	modified:   f1.txt

no changes added to commit (use <span class="hljs-string">"git add"</span> and/or <span class="hljs-string">"git commit -a"</span>)
07.reset_mixed % <span class="hljs-built_in">cat</span> f1.txt
d
07.reset_mixed %
</code></pre>
<h1></h1><h2>hard</h2>
<ul>
<li><code>commit</code>, <code>stage</code>, <code>working directory</code> 모두 되돌린다.</li>
</ul>
<pre><code class="hljs language-sh">08.reset_hard % git init
Initialized empty Git repository <span class="hljs-keyword">in</span> /git-session/08.reset_hard/.git/
08.reset_hard % <span class="hljs-built_in">echo</span> <span class="hljs-string">"a"</span> > f1.txt
08.reset_hard % git add .
08.reset_hard % git commit -m 1
[main (root-commit) 2326a13] 1
 1 file changed, 1 insertion(+)
 create mode 100644 f1.txt
08.reset_hard % <span class="hljs-built_in">echo</span> <span class="hljs-string">"b"</span> > f1.txt
08.reset_hard % git commit -am 2
[main cec679a] 2
 1 file changed, 1 insertion(+), 1 deletion(-)
08.reset_hard % <span class="hljs-built_in">echo</span> <span class="hljs-string">"c"</span> > f1.txt
08.reset_hard % git commit -am 3
[main 549ea8b] 3
 1 file changed, 1 insertion(+), 1 deletion(-)
08.reset_hard % git <span class="hljs-built_in">log</span> --oneline
549ea8b (HEAD -> main) 3
cec679a 2
2326a13 1
08.reset_hard % <span class="hljs-built_in">echo</span> <span class="hljs-string">"d"</span> > f1.txt
08.reset_hard % git add .
08.reset_hard % git status
On branch main
Changes to be committed:
  (use <span class="hljs-string">"git restore --staged &#x3C;file>..."</span> to unstage)
	modified:   f1.txt

08.reset_hard % git reset --hard cec679a
HEAD is now at cec679a 2
08.reset_hard % git <span class="hljs-built_in">log</span> --oneline
cec679a (HEAD -> main) 2
2326a13 1
08.reset_hard % git status
On branch main
nothing to commit, working tree clean
08.reset_hard % <span class="hljs-built_in">cat</span> f1.txt
b
08.reset_hard %
</code></pre>
<h1>revert</h1>
<ul>
<li><code>reset</code> 과 달리 새로운 되돌리기 <code>commit</code> 을 생성한다.</li>
<li><code>git reset</code>은 특정 커밋으로 이동하는 반면, <code>git revert</code>는 변경 사항을 되돌리는 커밋을 추가하는 방식 이다.</li>
<li><code>commit</code> 에 대한 이력을 유지 한다.</li>
</ul><h2>주요 명령어</h2>
<ul>
<li><code>git revert HEAD</code> : 최근 <code>commit</code> 의 변경 사항을 반대로 적용하는 새로운 <code>commit</code> 을 만든다.</li>
<li><code>git revert {hash}</code> : 특정 <code>commit</code> 의 변경 사항을 반대로 적용하는 새로운 <code>commit</code> 을 생성한다. (해당 시점으로 이동하는 것이 아니다.)</li>
</ul>
<pre><code class="hljs language-sh">09.revert % git init
Initialized empty Git repository <span class="hljs-keyword">in</span> /git-session/09.revert/.git/
09.revert % <span class="hljs-built_in">echo</span> <span class="hljs-string">"a"</span> > f1.txt
09.revert % git add .
09.revert % git commit -m 1
[main (root-commit) d34d44b] 1
 1 file changed, 1 insertion(+)
 create mode 100644 f1.txt
09.revert % <span class="hljs-built_in">echo</span> <span class="hljs-string">"b"</span> > f1.txt
09.revert % git commit -am 2
[main 9f0c1ba] 2
 1 file changed, 1 insertion(+), 1 deletion(-)
09.revert % <span class="hljs-built_in">echo</span> <span class="hljs-string">"c"</span> > f1.txt
09.revert % git commit -am 3
[main 7ff82d6] 3
 1 file changed, 1 insertion(+), 1 deletion(-)
09.revert % git <span class="hljs-built_in">log</span> --oneline
7ff82d6 (HEAD -> main) 3
9f0c1ba 2
d34d44b 1
09.revert % git revert 7ff82d6
[main c9dc2c5] Revert <span class="hljs-string">"3"</span>
 1 file changed, 1 insertion(+), 1 deletion(-)
09.revert % git <span class="hljs-built_in">log</span> --oneline
c9dc2c5 (HEAD -> main) Revert <span class="hljs-string">"3"</span>
7ff82d6 3
9f0c1ba 2
d34d44b 1
09.revert % <span class="hljs-built_in">cat</span> f1.txt
b
09.revert %
</code></pre>
<h1>cherry-pick</h1>
<ul>
<li>특정 <code>commit</code> 을 선택하여 현재 <code>branch</code> 에 적용한다.</li>
<li><code>branch</code> 를 병합하는 <code>merge</code> 와 달리, 병합하지 않고 특정 내용을 골라서 가져온다.</li>
<li>새로운 <code>commit</code> 이 생성 된다.</li>
<li>충돌 가능성이 높다.</li>
</ul><h2>주요 명령어</h2>
<ul>
<li><code>git cherry-pick {hash}</code> : 특정 <code>commit</code> 의 내용을 가지고 온다.</li>
<li><code>git cherry-pick {hash 1} {hash 2} </code> : 여러 <code>commit</code> 의 내용을 가지고 온다.</li>
<li><code>git cherry-pick {start hash}..{end hash}</code> : 연속 된 여러 <code>commit</code> 의 내용을 가지고 온다.</li>
<li><code>git cherry-pick --continue</code> : <code>conflict</code> 해결 후 <code>revert</code> 를 계속 한다.</li>
<li><code>git cherry-pick --abort</code> : <code>conflict</code> 상황에서 <code>revert</code> 를 중단 한다.</li>
</ul>
<pre><code class="hljs language-sh">10.cherry-pick % git init
Initialized empty Git repository <span class="hljs-keyword">in</span> /git-session/10.cherry-pick/.git/
10.cherry-pick % vi f1.txt
10.cherry-pick % <span class="hljs-built_in">cat</span> f1.txt
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">1</span></span>() {
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">2</span></span>() {
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">3</span></span>() {
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">4</span></span>() {
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">5</span></span>() {
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">6</span></span>() {
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">1</span></span>() {
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">7</span></span>() {
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">8</span></span>() {
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">9</span></span>() {
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">10</span></span>() {
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">11</span></span>() {
}
10.cherry-pick % git add .
10.cherry-pick % git commit -m 0
[main (root-commit) 6d38c28] 0
 1 file changed, 22 insertions(+)
 create mode 100644 f1.txt

10.cherry-pick % vi f1.txt
10.cherry-pick % <span class="hljs-built_in">cat</span> f1.txt
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">1</span></span>() {
	// 1 ok
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">2</span></span>() {
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">3</span></span>() {
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">4</span></span>() {
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">5</span></span>() {
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">6</span></span>() {
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">1</span></span>() {
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">7</span></span>() {
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">8</span></span>() {
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">9</span></span>() {
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">10</span></span>() {
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">11</span></span>() {
}
10.cherry-pick % git commit -am 1
[main ee4a7eb] 1
 1 file changed, 1 insertion(+)

10.cherry-pick % git checkout -b feature
Switched to a new branch <span class="hljs-string">'feature'</span>
10.cherry-pick % vi f1.txt
10.cherry-pick % <span class="hljs-built_in">cat</span> f1.txt
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">1</span></span>() {
	// 1 ok
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">2</span></span>() {
	// 2 ok
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">3</span></span>() {
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">4</span></span>() {
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">5</span></span>() {
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">6</span></span>() {
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">7</span></span>() {
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">8</span></span>() {
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">1</span></span>() {
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">9</span></span>() {
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">10</span></span>() {
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">1</span></span>() {
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">11</span></span>() {
}
10.cherry-pick % git commit -am 2
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">1</span></span>() {
[feature c7dd91b] 2
 1 file changed, 1 insertion(+)

10.cherry-pick % vi f1.txt
10.cherry-pick % <span class="hljs-built_in">cat</span> f1.txt
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">1</span></span>() {
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">1</span></span>() {
	// 1 ok
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">2</span></span>() {
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">1</span></span>() {
	// 2 ok
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">3</span></span>() {
	// 3 ok
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">1</span></span>() {
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">4</span></span>() {
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">5</span></span>() {
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">1</span></span>() {
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">6</span></span>() {
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">7</span></span>() {
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">8</span></span>() {
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">9</span></span>() {
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">10</span></span>() {
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">11</span></span>() {
}
10.cherry-pick % git commit -am 3
[feature 00e83c8] 3
 1 file changed, 1 insertion(+)

10.cherry-pick % vi f1.txt
10.cherry-pick % git commit -am 4
[feature 2e09100] 4
 1 file changed, 1 insertion(+)
10.cherry-pick % <span class="hljs-built_in">cat</span> f1.txt
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">1</span></span>() {
	// 1 ok
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">2</span></span>() {
	// 2 ok
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">3</span></span>() {
	// 3 ok
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">4</span></span>() {
	// 4 ok
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">5</span></span>() {
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">6</span></span>() {
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">7</span></span>() {
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">8</span></span>() {
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">9</span></span>() {
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">10</span></span>() {
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">11</span></span>() {
}
10.cherry-pick % git commit -am 4
On branch feature
nothing to commit, working tree clean

10.cherry-pick % vi f1.txt
10.cherry-pick % git commit -am 5
[feature 41b882e] 5
 1 file changed, 1 insertion(+)
10.cherry-pick % vi f1.txt
10.cherry-pick % git commit -am 6
[feature 9ecc115] 6
 1 file changed, 1 insertion(+)
10.cherry-pick % vi f1.txt
10.cherry-pick % git commit -am 7
[feature 40700b3] 7
 1 file changed, 1 insertion(+)
10.cherry-pick % vi f1.txt
10.cherry-pick % git commit -am 8
[feature 0060fdb] 8
 1 file changed, 1 insertion(+)
10.cherry-pick % vi f1.txt
10.cherry-pick % git commit -am 9
[feature 4b2cb48] 9
 1 file changed, 1 insertion(+)
10.cherry-pick % vi f1.txt
10.cherry-pick % git commit -am 10
[feature a366708] 10
 1 file changed, 1 insertion(+)
10.cherry-pick % vi f1.txt
10.cherry-pick % git commit -am 11
[feature 38cf6ac] 11
 1 file changed, 1 insertion(+)

10.cherry-pick % <span class="hljs-built_in">cat</span> f1.txt
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">1</span></span>() {
	// 1 ok
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">2</span></span>() {
	// 2 ok
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">3</span></span>() {
	// 3 ok
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">4</span></span>() {
	// 4 ok
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">5</span></span>() {
	// 5 ok
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">6</span></span>() {
	// 6 ok
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">7</span></span>() {
	// 7 ok
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">8</span></span>() {
	// 8 ok
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">9</span></span>() {
	// 9 ok
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">10</span></span>() {
	// 10 ok
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">11</span></span>() {
	// 11 ok
}

10.cherry-pick % git checkout main
Switched to branch <span class="hljs-string">'main'</span>
10.cherry-pick % git <span class="hljs-built_in">log</span> --oneline --graph --all
* 38cf6ac (feature) 11
* a366708 10
* 4b2cb48 9
* 0060fdb 8
* 40700b3 7
* 9ecc115 6
* 41b882e 5
* 2e09100 4
* 00e83c8 3
* c7dd91b 2
* ee4a7eb (HEAD -> main) 1
* 6d38c28 0

10.cherry-pick % <span class="hljs-built_in">cat</span> f1.txt
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">1</span></span>() {
	// 1 ok
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">2</span></span>() {
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">3</span></span>() {
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">4</span></span>() {
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">5</span></span>() {
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">6</span></span>() {
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">7</span></span>() {
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">8</span></span>() {
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">9</span></span>() {
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">10</span></span>() {
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">11</span></span>() {
}

10.cherry-pick % >>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
10.cherry-pick % // git cherry-pick 3
10.cherry-pick % git cherry-pick 00e83c8
Auto-merging f1.txt
[main fe021b3] 3
 Date: Sun Feb 23 10:05:33 2025 +0900
 1 file changed, 1 insertion(+)
10.cherry-pick % git <span class="hljs-built_in">log</span> --oneline --graph --all
* fe021b3 (HEAD -> main) 3
| * 38cf6ac (feature) 11
| * a366708 10
| * 4b2cb48 9
| * 0060fdb 8
| * 40700b3 7
| * 9ecc115 6
| * 41b882e 5
| * 2e09100 4
| * 00e83c8 3
| * c7dd91b 2
|/
* ee4a7eb 1
* 6d38c28 0
10.cherry-pick % <span class="hljs-built_in">cat</span> f1.txt
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">1</span></span>() {
	// 1 ok
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">2</span></span>() {
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">3</span></span>() {
	// 3 ok
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">4</span></span>() {
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">5</span></span>() {
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">6</span></span>() {
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">7</span></span>() {
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">8</span></span>() {
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">9</span></span>() {
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">10</span></span>() {
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">11</span></span>() {
}

10.cherry-pick % // git cherry-pick 4, 6
10.cherry-pick % git cherry-pick 2e09100 9ecc115
Auto-merging f1.txt
[main 61199f4] 4
 Date: Sun Feb 23 10:05:46 2025 +0900
 1 file changed, 1 insertion(+)
Auto-merging f1.txt
[main 75003d9] 6
 Date: Sun Feb 23 10:06:20 2025 +0900
 1 file changed, 1 insertion(+)

10.cherry-pick % git <span class="hljs-built_in">log</span> --oneline --graph --all
* 75003d9 (HEAD -> main) 6
* 61199f4 4
* fe021b3 3
| * 38cf6ac (feature) 11
| * a366708 10
| * 4b2cb48 9
| * 0060fdb 8
| * 40700b3 7
| * 9ecc115 6
| * 41b882e 5
| * 2e09100 4
| * 00e83c8 3
| * c7dd91b 2
|/
* ee4a7eb 1
* 6d38c28 0

10.cherry-pick % <span class="hljs-built_in">cat</span> f1.txt
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">1</span></span>() {
	// 1 ok
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">2</span></span>() {
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">3</span></span>() {
	// 3 ok
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">4</span></span>() {
	// 4 ok
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">5</span></span>() {
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">6</span></span>() {
	// 6 ok
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">7</span></span>() {
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">8</span></span>() {
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">9</span></span>() {
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">10</span></span>() {
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">11</span></span>() {
}

10.cherry-pick % // git cherry-pick 8..10
10.cherry-pick % git cherry-pick 40700b3..a366708
Auto-merging f1.txt
[main 1ee834a] 8
 Date: Sun Feb 23 10:06:45 2025 +0900
 1 file changed, 1 insertion(+)
Auto-merging f1.txt
[main 0dc3fee] 9
 Date: Sun Feb 23 10:06:58 2025 +0900
 1 file changed, 1 insertion(+)
Auto-merging f1.txt
[main 9afe62a] 10
 Date: Sun Feb 23 10:07:17 2025 +0900
 1 file changed, 1 insertion(+)

10.cherry-pick % git <span class="hljs-built_in">log</span> --oneline --graph --all
* 9afe62a (HEAD -> main) 10
* 0dc3fee 9
* 1ee834a 8
* 75003d9 6
* 61199f4 4
* fe021b3 3
| * 38cf6ac (feature) 11
| * a366708 10
| * 4b2cb48 9
| * 0060fdb 8
| * 40700b3 7
| * 9ecc115 6
| * 41b882e 5
| * 2e09100 4
| * 00e83c8 3
| * c7dd91b 2
|/
* ee4a7eb 1
* 6d38c28 0

10.cherry-pick % <span class="hljs-built_in">cat</span> f1.txt
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">1</span></span>() {
	// 1 ok
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">2</span></span>() {
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">3</span></span>() {
	// 3 ok
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">4</span></span>() {
	// 4 ok
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">5</span></span>() {
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">6</span></span>() {
	// 6 ok
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">7</span></span>() {
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">8</span></span>() {
	// 8 ok
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">9</span></span>() {
	// 9 ok
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">10</span></span>() {
	// 10 ok
}
<span class="hljs-keyword">function</span> <span class="hljs-function"><span class="hljs-title">11</span></span>() {
}
10.cherry-pick %
</code></pre>
<h1>stash</h1>
<ul>
<li>현재 변경 사항을 임시 저장 한다.</li>
<li>기본적으로 해당 변경은 git 이 관리 중이어야 한다. (<code>tracked</code> 상태)</li>
<li>기본적으로 <code>local</code> 에서 관리 하므로 다른 사람과 공유할 수 없다.</li>
<li><code>tracked</code> 상태라면 <code>staging</code> (<code>git add</code>) 되지 않은 변경도 함께 저장 된다.</li>
<li>과하게 사용하면 중요한 변경 사항을 잃어버릴 수 있다.</li>
</ul><h2>주요 명령어</h2>
<ul>
<li><code>git stash</code> : <code>stash</code> 를 저장한다. <code>untracked</code> 상태의 변경은 저장하지 않는다.</li>
<li><code>git stash -u</code> : <code>untracked</code> 상태의 변경을 포함하여 <code>stash</code> 를 저장한다.</li>
<li><code>git stash --all</code> : <code>untracked</code> 상태의 변경과 <code>ignore</code> 파일까지 포함하여 <code>stash</code> 를 저장한다.</li>
<li><code>git stash show stash@{?}</code> : <code>stash@{?}</code>에 저장된 변경 사항을 확인한다. (<code>-p</code> 옵션을 추가하면 diff 형태로 표시할 수 있다.)</li>
<li><code>git stash save {description}</code> : 새로운 stash 를 저장할 때, 설명을 추가하여 저장한다.</li>
<li><code>git stash push -m {description}</code> : 새로운 stash를 저장할 떄, 설명을 추가하여 저장한다. (<code>git stash save</code>의 최신 대체 명령어)</li>
<li><code>git stash list</code> : 저장된 stash 목록을 조회 한다.</li>
<li><code>git stash pop</code> : 가장 최근 저장한 stash 한 내용을 적용하고 목록에서 삭제한다.</li>
<li><code>git stash apply</code> : 가장 최근 저장한 stash 한 내용을 적용하고 목록에서 삭제하지 않는다.</li>
<li><code>git stash apply stash@{?}</code> : <code>stash@{?}</code> 를 적용하고, 목록에서 삭제하지 않는다.</li>
<li><code>git stash drop stash@{?}</code> : <code>stash@{?}</code> 를 적용하고, 목록에서 삭제한다.</li>
<li><code>git stash clear</code> : 저장 된 모든 stash 를 삭제 한다.</li>
</ul><h2>stash untracked modification</h2>
<ul>
<li>tracked 상태가 아닌 변경 사항을 저장</li>
</ul>
<pre><code class="hljs language-sh">11.stash % git init
Initialized empty Git repository <span class="hljs-keyword">in</span> /git-session/11.stash/.git/
11.stash % <span class="hljs-built_in">echo</span> <span class="hljs-string">"a"</span> > f1.txt
11.stash % git add .
11.stash % git commit -m 1
[main (root-commit) d5e8f83] 1
 1 file changed, 1 insertion(+)
 create mode 100644 f1.txt
 
11.stash % <span class="hljs-built_in">echo</span> <span class="hljs-string">"b"</span> > f2.txt

11.stash % <span class="hljs-built_in">ls</span> -al
total 16
-rw-r--r--@  1 seok  staff    2  2 23 10:43 f1.txt
-rw-r--r--@  1 seok  staff    2  2 23 10:45 f2.txt

11.stash % git status
On branch main
Untracked files:
  (use <span class="hljs-string">"git add &#x3C;file>..."</span> to include <span class="hljs-keyword">in</span> what will be committed)
	f2.txt

nothing added to commit but untracked files present (use <span class="hljs-string">"git add"</span> to track)

11.stash % git stash
No <span class="hljs-built_in">local</span> changes to save

11.stash % git stash -u
Saved working directory and index state WIP on main: d5e8f83 1
11.stash % <span class="hljs-built_in">ls</span> -al
total 8
-rw-r--r--@  1 seok  staff    2  2 23 10:43 f1.txt

11.stash % git stash list
stash@{0}: WIP on main: d5e8f83 1

11.stash % git stash pop
Already up to <span class="hljs-built_in">date</span>.
On branch main
Untracked files:
  (use <span class="hljs-string">"git add &#x3C;file>..."</span> to include <span class="hljs-keyword">in</span> what will be committed)
	f2.txt

nothing added to commit but untracked files present (use <span class="hljs-string">"git add"</span> to track)
Dropped refs/stash@{0} (b234f1055f96976b2cc6c8fecb1d429e582544fb)

11.stash % git stash list
11.stash % <span class="hljs-built_in">ls</span> -al
total 16
-rw-r--r--@  1 seok  staff    2  2 23 10:43 f1.txt
-rw-r--r--@  1 seok  staff    2  2 23 10:46 f2.txt
11.stash % <span class="hljs-built_in">cat</span> f2.txt
b
11.stash %
</code></pre><h2>stash 한 내용은 다른 branch 에서 사용할 수 있다.</h2>
<pre><code class="hljs language-sh">11.stash % git stash list
11.stash % git status
On branch main
Untracked files:
  (use <span class="hljs-string">"git add &#x3C;file>..."</span> to include <span class="hljs-keyword">in</span> what will be committed)
	f2.txt

nothing added to commit but untracked files present (use <span class="hljs-string">"git add"</span> to track)
11.stash % <span class="hljs-built_in">ls</span> -al
total 16
-rw-r--r--@  1 seok  staff    2  2 23 10:43 f1.txt
-rw-r--r--@  1 seok  staff    2  2 23 10:46 f2.txt
11.stash % git add .
11.stash % git status
On branch feature
Changes to be committed:
  (use <span class="hljs-string">"git restore --staged &#x3C;file>..."</span> to unstage)
	new file:   f2.txt

11.stash % git stash
Saved working directory and index state WIP on main: d5e8f83 1
11.stash % git stash list
stash@{0}: WIP on main: d5e8f83 1
11.stash % <span class="hljs-built_in">ls</span> -al
-rw-r--r--@  1 seok  staff    2  2 23 10:43 f1.txt

11.stash % git checkout -b feature
Switched to new branch <span class="hljs-string">'feature'</span>
11.stash % git stash list
stash@{0}: WIP on main: d5e8f83 1

11.stash % <span class="hljs-built_in">ls</span> -al
total 8
-rw-r--r--@  1 seok  staff    2  2 23 10:43 f1.txt

11.stash % git stash pop
On branch feature
Changes to be committed:
  (use <span class="hljs-string">"git restore --staged &#x3C;file>..."</span> to unstage)
	new file:   f2.txt

Dropped refs/stash@{0} (5bc5051b2fa9bd1db4ac64dffafbba3939076dc4)

11.stash % git status
On branch feature
Changes to be committed:
  (use <span class="hljs-string">"git restore --staged &#x3C;file>..."</span> to unstage)
	new file:   f2.txt

11.stash % <span class="hljs-built_in">ls</span> -al
total 16
-rw-r--r--@  1 seok  staff    2  2 23 10:43 f1.txt
-rw-r--r--@  1 seok  staff    2  2 23 10:59 f2.txt
11.stash %
</code></pre>
<h1>amend</h1>
<ul>
<li>최근 <code>commit</code> 을 수정하여 새로운 <code>commit</code> 으로 대체하는 방식으로 동작 한다.</li>
<li>기존 <code>commit</code> 의 <code>hash</code> 값이 변경 된다.</li>
<li><code>commit</code> 메시지를 변견 하거나, 새로운 파일을 추가하는 등 <code>commit</code> 을 정리할 때 사용할 수 있다.</li>
<li><code>commit</code> 메시지나 변경 사항에 대해 실수했을 때 빠르게 수정하여 불필요한 <code>commit</code> 을 줄이고 이력을 깔끔하게 유지할 수 있다.</li>
<li>원격 저장소에 <code>push</code> 한 <code>commit</code> 을 수정하면 충돌 가능성이 있다.</li>
<li><code>git commit --amend</code> 는 로컬 저장소에서 사용해야 하며, 원격 저장소에 <code>push</code> 된 <code>commit</code> 을 수정할 경우 <code>git push --force</code> 가 필요하다.</li>
<li>협업 상태에서는 <code>amend</code> 보다 <code>revert</code> 를 사용하는 것이 안전하다.</li>
</ul><h2>주요 명령어</h2>
<ul>
<li><code>git commit --amend</code> : 마지막 커밋을 수정 (커밋 메시지 변경)</li>
<li><code>git commit --amend -m "새로운 메시지"</code> : 커밋 메시지를 변경 한다.</li>
<li><code>git commit --amend --no-edit</code> : 커밋 메시지는 그대로 유지하고 파일만 추가 한다.</li>
<li><code>git commit --amend --date "YYYY-MM-DD HH:MM:SS"</code> : 커밋 날짜를 변경 한다.</li>
<li><code>git commit --amend --author "새로운 이름 &#x3C;email@domain.com>"</code> : 커밋 작성자를 변경 한다.</li>
</ul>
<h1></h1><h2>commit message 수정</h2>
<pre><code class="hljs language-sh">12.amed % git init
Initialized empty Git repository <span class="hljs-keyword">in</span> /git-session/12.amed/.git/
12.amed % <span class="hljs-built_in">echo</span> <span class="hljs-string">"a"</span> > f1.txt
12.amed % git add .
12.amed % git commit -m <span class="hljs-string">'ello, git!'</span>
[main (root-commit) e567771] ello, git!
 1 file changed, 1 insertion(+)
 create mode 100644 f1.txt

12.amed % git <span class="hljs-built_in">log</span> --oneline
e567771 (HEAD -> main) ello, git!

12.amed % git commit --amend -m <span class="hljs-string">'hello, git!!'</span>
[main d75d647] hello, git!!
 Date: Sun Feb 23 21:52:47 2025 +0900
 1 file changed, 1 insertion(+)
 create mode 100644 f1.txt

12.amed % git <span class="hljs-built_in">log</span> --oneline
d75d647 (HEAD -> main) hello, git!!
12.amed %
</code></pre>
<h1></h1><h2>commit 에 새로운 파일 추가</h2>
<pre><code class="hljs language-sh">12.amed % <span class="hljs-built_in">echo</span> <span class="hljs-string">"b"</span> > f2.txt
12.amed % git add f2.txt

12.amed % git commit --amend --no-edit
[main 370034c] hello, git!!
 Date: Sun Feb 23 21:52:47 2025 +0900
 2 files changed, 2 insertions(+)
 create mode 100644 f1.txt
 create mode 100644 f2.txt

12.amed % git <span class="hljs-built_in">log</span> --oneline --all
370034c (HEAD -> main) hello, git!!

12.amed % git <span class="hljs-built_in">log</span> -p
commit 370034c8c45bc557cd0ec8c4a8dd0f9aba8cc314 (HEAD -> main)
Author: nimkoes &#x3C;xxxelppa@gmail.com>
Date:   Sun Feb 23 21:52:47 2025 +0900

    hello, git!!

diff --git a/f1.txt b/f1.txt
new file mode 100644
index 0000000..7898192
--- /dev/null
+++ b/f1.txt
@@ -0,0 +1 @@
+a
diff --git a/f2.txt b/f2.txt
new file mode 100644
index 0000000..6178079
--- /dev/null
+++ b/f2.txt
@@ -0,0 +1 @@
+b
12.amed %
</code></pre>
<h1></h1><h2>commit 날짜 변경</h2>
<pre><code class="hljs language-sh">12.amed % git <span class="hljs-built_in">log</span>
commit 370034c8c45bc557cd0ec8c4a8dd0f9aba8cc314 (HEAD -> main)
Author: nimkoes &#x3C;xxxelppa@gmail.com>
Date:   Sun Feb 23 21:52:47 2025 +0900

    hello, git!!

12.amed % git commit --amend --<span class="hljs-built_in">date</span> <span class="hljs-string">"2022-02-22 22:22:22"</span>
[main 3f82586] hello, git!!
 Date: Tue Feb 22 22:22:22 2022 +0900
 2 files changed, 2 insertions(+)
 create mode 100644 f1.txt
 create mode 100644 f2.txt

12.amed % git <span class="hljs-built_in">log</span>
commit 3f825867b00946411e6c623dfa190a6ba218c790 (HEAD -> main)
Author: nimkoes &#x3C;xxxelppa@gmail.com>
Date:   Tue Feb 22 22:22:22 2022 +0900

    hello, git!!
12.amed %
</code></pre>
<h1>부록</h1><h2>git 의 hash 값</h2>
<ul>
<li>각 커밋을 고유하게 식별하기 위해 사용</li>
<li>SHA-1 해시(SHA-1 Hash) 사용</li>
<li><code>commit</code> <code>hash</code> 를 결정하는 요소
<ul>
<li>이전 <code>commit</code> 의 <code>hash</code></li>
<li><code>commit</code> 한 파일 및 디렉토리의 상태 (= Snapshot)</li>
<li><code>commit</code> 메시지</li>
<li><code>commit</code> 작성자 (= Author)</li>
<li><code>commit</code> 시간 (= Timestamp)</li>
</ul>
</li>
</ul>
<h1></h1><h2>Hash 값이 바뀌는 것이 중요한 이유</h2>
<ul>
<li><code>branch</code> 이력 변경 → <code>rebase</code> 나 <code>amend</code> 를 하면 원래의 <code>commit</code> 과 다르게 변경된다.</li>
<li><code>push</code> 충돌 발생 가능 → 기존에 <code>push</code> 된 <code>commit</code> 을 변경하면 <code>git push --force</code> 가 필요할 수 있다.</li>
<li>협업 중 문제 발생 가능 → 다른 사람이 <code>pull</code> 하기 전에 커밋을 변경하면 충돌이 발생할 가능성이 있다.</li>
</ul>2:[["$","div",null,{"className":"$undefined","children":[["$","header",null,{"className":"PostHeader_postHeader__OohTH","children":[["$","h1",null,{"className":"PostHeader_title__NoKGt","children":"Git 명령어 모음"}],["$","p",null,{"className":"PostHeader_description__moC_r","children":"Git을 효율적으로 사용하기 위한 기본 명령어 모음입니다."}],["$","div",null,{"className":"PostHeader_meta__9Swgx","children":[["$","span",null,{"className":"$undefined","children":"nimkoes"}],["$","span",null,{"className":"$undefined","children":"2025-02-22"}]]}],["$","div",null,{"className":"PostHeader_tags__lGQ1Q","children":[["$","span","git",{"className":"PostHeader_tag__Jf7BC","children":"git"}],["$","span","명령어",{"className":"PostHeader_tag__Jf7BC","children":"명령어"}],["$","span","github",{"className":"PostHeader_tag__Jf7BC","children":"github"}]]}]]}],["$","$L8",null,{}],["$","article",null,{"className":"page_markdown__SVl4d","children":[["$","$L9",null,{"className":"page_topAd__ctbB7"}],["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$a"}}],["$","$Lb",null,{"className":"page_middleAd__4qBOv","client":"ca-pub-6151583773425822","slot":"your-ad-slot-id"}],["$","div",null,{"dangerouslySetInnerHTML":{"__html":"$c"}}],["$","$Lb",null,{"className":"page_bottomAd__f0OO_","client":"ca-pub-6151583773425822","slot":"your-ad-slot-id"}]]}]]}],["$","div",null,{"className":"page_floatingButtons__qJiZU","children":["$","$Ld",null,{}]}],["$","$Le",null,{}]]
7:[["$","meta","0",{"name":"viewport","content":"width=device-width, initial-scale=1"}],["$","meta","1",{"charSet":"utf-8"}],["$","title","2",{"children":"Git 명령어 모음 | Nimkoes Tech Blog"}],["$","meta","3",{"name":"description","content":"Git을 효율적으로 사용하기 위한 기본 명령어 모음입니다."}],["$","meta","4",{"name":"application-name","content":"Nimkoes Tech Blog"}],["$","link","5",{"rel":"author","href":"https://nimkoes.github.io/tech-blog"}],["$","meta","6",{"name":"author","content":"Nimkoes"}],["$","link","7",{"rel":"manifest","href":"/tech-blog/site.webmanifest","crossOrigin":"use-credentials"}],["$","meta","8",{"name":"keywords","content":"tech-blog,backend,software architect,infrastructure,development"}],["$","meta","9",{"name":"creator","content":"Nimkoes"}],["$","meta","10",{"name":"publisher","content":"Nimkoes"}],["$","meta","11",{"name":"robots","content":"index, follow, nocache"}],["$","meta","12",{"name":"googlebot","content":"index, follow, max-video-preview:-1, max-image-preview:large, max-snippet:-1"}],["$","meta","13",{"name":"category","content":"technology"}],["$","link","14",{"rel":"canonical","href":"https://nimkoes.github.io/tech-blog"}],["$","link","15",{"rel":"alternate","hrefLang":"ko-KR","href":"https://nimkoes.github.io/tech-blog"}],["$","meta","16",{"name":"format-detection","content":"telephone=no, address=no, email=no"}],["$","meta","17",{"name":"google-adsense-account","content":"ca-pub-6151583773425822"}],["$","meta","18",{"property":"og:title","content":"Nimkoes Tech Blog - 개발자의 기술 이야기"}],["$","meta","19",{"property":"og:description","content":"I work diligently to become lazy ☕"}],["$","meta","20",{"property":"og:url","content":"https://nimkoes.github.io/tech-blog"}],["$","meta","21",{"property":"og:site_name","content":"Nimkoes Tech Blog"}],["$","meta","22",{"property":"og:locale","content":"ko_KR"}],["$","meta","23",{"property":"og:image","content":"https://nimkoes.github.io/tech-blog/og-image.png"}],["$","meta","24",{"property":"og:image:width","content":"1200"}],["$","meta","25",{"property":"og:image:height","content":"630"}],["$","meta","26",{"property":"og:image:alt","content":"Nimkoes Tech Blog"}],["$","meta","27",{"property":"og:image:type","content":"image/png"}],["$","meta","28",{"property":"og:type","content":"website"}],["$","meta","29",{"name":"twitter:card","content":"summary_large_image"}],["$","meta","30",{"name":"twitter:site","content":"@nimkoes"}],["$","meta","31",{"name":"twitter:creator","content":"@nimkoes"}],["$","meta","32",{"name":"twitter:title","content":"Nimkoes Tech Blog"}],["$","meta","33",{"name":"twitter:description","content":"I work diligently to become lazy ☕"}],["$","meta","34",{"name":"twitter:image","content":"https://nimkoes.github.io/tech-blog/og-image.png"}],["$","link","35",{"rel":"icon","href":"/tech-blog/favicon.ico","sizes":"any"}],["$","link","36",{"rel":"icon","href":"/tech-blog/icon.svg","type":"image/svg+xml"}],["$","link","37",{"rel":"icon","href":"/tech-blog/favicon-32x32.png","sizes":"32x32","type":"image/png"}],["$","link","38",{"rel":"icon","href":"/tech-blog/favicon-16x16.png","sizes":"16x16","type":"image/png"}],["$","link","39",{"rel":"apple-touch-icon","href":"/tech-blog/apple-touch-icon.png","sizes":"180x180","type":"image/png"}],["$","link","40",{"rel":"mask-icon","href":"/tech-blog/safari-pinned-tab.svg","color":"#5bbad5"}],["$","meta","41",{"name":"next-size-adjust"}]]
1:null
